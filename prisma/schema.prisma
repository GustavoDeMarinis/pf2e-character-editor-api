generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  characterName    String
  ancestry         Ancestry       @relation(fields: [ancestryId], references: [id])
  ancestryId       String
  background       String?
  createdByUser    User           @relation("User_createdByUserId_fkey", fields: [createdByUserId], references: [id])
  createdByUserId  String
  assignedUser     User           @relation("User_assignedUserId_fkey", fields: [assignedUserId], references: [id])
  assignedUserId   String
  level            Int            @default(1)
  characterClass   CharacterClass @relation(fields: [characterClassId], references: [id])
  characterClassId String
  ancestryBoost    Attributes[]
  backgroundBoost  Attributes[]
  classBoost       Attributes
}

model Ancestry {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  name           String
  description    String?
  traits         Trait[]
  hitPoints      Int
  size           AncestrySize
  speed          Int
  attributeBoost Attributes[]
  attributeFlaw  Attributes[]
  languages      Languages[]
  rarity         Rarity
  Character      Character[]
}

model Languages {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  ancestries Ancestry[]
  rarity     Rarity
}

enum AncestrySize {
  Tiny
  Small
  Medium
  Large
  Huge
  Gargantuan
}

enum Attributes {
  Strength
  Dexterity
  Constitution
  Intelligence
  Wisdom
  Charisma
  Free
}

model CharacterClass {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  className     String
  description   String?
  keyAttributes Attributes[]
  hitPoints     Int
  characters    Character[]
}

enum UserRole {
  Admin
  Player
}

model User {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  userEmail         String      @unique
  userName          String      @unique
  password          String
  role              UserRole    @default(Player)
  characters        Character[] @relation("User_assignedUserId_fkey")
  charactersCreated Character[] @relation("User_createdByUserId_fkey")
}

enum WeaponCategory {
  Simple
  Martial
  Advanced
}

enum WeaponDamageType {
  Bludgeoning
  Slashing
  Piercing
}

enum WeaponType {
  Melee
  Ranged
}

enum WeaponHands {
  One
  Two
}

model WeaponBase {
  id                 String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  name               String
  description        String?
  category           WeaponCategory
  damageTypes        WeaponDamageType[]
  diceAmount         Int
  diceSize           Int
  criticalDiceAmount Int?
  criticalDiceSize   Int?
  weaponGroup        WeaponGroup        @relation(fields: [weaponGroupId], references: [id])
  weaponGroupId      String
  traits             Trait[]
  hands              WeaponHands[]
  range              Int?
  bulk               String?
}

model WeaponGroup {
  id                             String                       @id @default(cuid())
  createdAt                      DateTime                     @default(now())
  updatedAt                      DateTime                     @updatedAt
  deletedAt                      DateTime?
  name                           String
  weaponBases                    WeaponBase[]
  criticalSpecialization         WeaponCriticalSpecialization @relation(fields: [weaponCriticalSpecializationId], references: [id])
  weaponCriticalSpecializationId String
}

model Trait {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  name        String
  description String?
  //TODO add Type of Trait And add validation for type to be checked on adding trait to something
  //TODO add value property, this will set the amount of bonifier for traits like, deadly, Thrown etc. 
  weaponBases WeaponBase[]
  armorBases  ArmorBase[]
  ancestries  Ancestry[]
  runes       Rune[]
}

model WeaponCriticalSpecialization {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  name         String
  description  String?
  weaponGroups WeaponGroup[]
}

enum Rarity {
  Common
  Uncommon
  Rare
  Secret
}

enum ArmorCategory {
  Unarmored
  Light
  Medium
  Heavy
}

model ArmorBase {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  name         String
  description  String?
  rarity       Rarity
  traits       Trait[]
  category     ArmorCategory
  armorClass   Int
  dexCap       Int
  checkPenalty Int
  speedPenalty Int
  strengthReq  Int
  price        Int
  bulk         String
  armorGroup   ArmorGroup    @relation(fields: [armorGroupId], references: [id])
  armorGroupId String
}

model ArmorGroup {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  name        String
  description String?
  armorBases  ArmorBase[]
}

enum RuneItemSubcategory {
  WeaponProperty
  WeaponFundamental
  ArmorProperty
  ArmorFundamental
  Shield
  Accessory
}

model Rune {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  name                String
  description         String?
  rarity              Rarity
  traits              Trait[]
  runeItemSubcategory RuneItemSubcategory
  level               Int                 @default(1)
  price               Int
}
