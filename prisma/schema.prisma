generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  characterName    String
  ancestry         String?
  background       String?
  createdByUser    User           @relation("User_createdByUserId_fkey", fields: [createdByUserId], references: [id])
  createdByUserId  String
  assignedUser     User           @relation("User_assignedUserId_fkey", fields: [assignedUserId], references: [id])
  assignedUserId   String
  level            Int            @default(1)
  characterClass   CharacterClass @relation(fields: [characterClassId], references: [id])
  characterClassId String
}

enum Attributes {
  Strength
  Dexterity
  Constitution
  Intelligence
  Wisdom
  Charisma
  Other
}

model CharacterClass {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  className     String
  description   String
  keyAttributes Attributes[]
  hitPoints     Int
  character     Character[]
}

enum UserRole {
  Admin
  Player
}

model User {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  userEmail         String      @unique
  userName          String      @unique
  password          String
  role              UserRole    @default(Player)
  characters        Character[] @relation("User_assignedUserId_fkey")
  charactersCreated Character[] @relation("User_createdByUserId_fkey")
}

enum WeaponCategory {
  Simple
  Martial
  Advanced
  MataHombresDeArena
}

enum WeaponDamageType {
  Bludgeoning
  Slashing
  Piercing
}

enum WeaponType {
  Melee
  Ranged
}

enum WeaponHands {
  One
  Two
  Both
}

model WeaponBase {
  id                 String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  name               String
  category           WeaponCategory
  ancestry           String? //Todo create Ancestry table
  damageType         WeaponDamageType[]
  diceAmount         Int
  diceSize           Int
  criticalDiceAmount Int?
  criticalDiceSize   Int?
  weaponGroup        WeaponGroup        @relation(fields: [weaponGroupId], references: [id])
  weaponGroupId      String
  weaponTrait        WeaponTrait[]
  hands              WeaponHands
  range              Int
}

model WeaponGroup {
  id                             String                       @id @default(cuid())
  createdAt                      DateTime                     @default(now())
  updatedAt                      DateTime                     @updatedAt
  deletedAt                      DateTime?
  name                           String
  weaponBase                     WeaponBase[]
  criticalSpecialization         WeaponCriticalSpecialization @relation(fields: [weaponCriticalSpecializationId], references: [id])
  weaponCriticalSpecializationId String
}

model WeaponTrait {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  name       String
  weaponBase WeaponBase[]
}

model WeaponCriticalSpecialization {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  name        String
  weaponGroup WeaponGroup[]
}

// model itemPasiveBonus {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   bonusTo   String
//   bonusType String
// }
